package com.yanggang.autoinspection.adapter.inspectedpost;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.yanggang.autoinspection.CustomObjectMapper;
import com.yanggang.autoinspection.InspectedPostMessageProducePort;
import com.yanggang.autoinspection.adapter.common.OperationType;
import com.yanggang.autoinspection.adapter.exception.KafkaProduceException;
import com.yanggang.autoinspection.content.inspectedpost.model.InspectedPost;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Component;

import static com.yanggang.autoinspection.adapter.common.Topic.INSPECTED_POST_TOPIC;

@Component
public class InspectedPostMessageProduceAdapter implements InspectedPostMessageProducePort {

    private final KafkaTemplate<String, String> kafkaTemplate;
    private final CustomObjectMapper objectMapper;

    public InspectedPostMessageProduceAdapter(KafkaTemplate<String, String> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
        this.objectMapper = new CustomObjectMapper();
    }

    @Override
    public void sendCreateMessage(InspectedPost post) {
        InspectedPostMessage message = InspectedPostMessage.builder()
                .id(post.getPost().getId())
                .payload(InspectedPostMessage.Payload.builder()
                        .post(post.getPost())
                        .categoryName(post.getCategoryName())
                        .autoGeneratedTags(post.getAutoGeneratedTags())
                        .inspectedDate(post.getInspectedDate())
                        .build())
                .operationType(OperationType.CREATE)
                .build();

        this.sendMessage(message);
    }

    @Override
    public void sendUpdateMessage(InspectedPost post) {
        InspectedPostMessage message = InspectedPostMessage.builder()
                .id(post.getPost().getId())
                .payload(InspectedPostMessage.Payload.builder()
                        .post(post.getPost())
                        .categoryName(post.getCategoryName())
                        .autoGeneratedTags(post.getAutoGeneratedTags())
                        .inspectedDate(post.getInspectedDate())
                        .build())
                .operationType(OperationType.UPDATE)
                .build();

        this.sendMessage(message);
    }

    @Override
    public void sendDeleteMessage(Long postId) {
        InspectedPostMessage message = InspectedPostMessage.builder()
                .id(postId)
                .payload(null)
                .operationType(OperationType.DELETE)
                .build();

        this.sendMessage(message);
    }

    private void sendMessage(InspectedPostMessage message) {
        try {
            kafkaTemplate.send(INSPECTED_POST_TOPIC, message.getId().toString(), objectMapper.writeValueAsString(message));
        } catch (JsonProcessingException e) {
            throw new KafkaProduceException(String.format("Kafka Produce 예외가 발생했습니다. message: %{s}", message), e);
        }
    }
}
